from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import bold

from apply_parser import search
from bot import dp
from utils.program_data import get_mapped_abiturient_data, level_map, basis_map, category_map
from utils.states import FindMeState


@dp.message(Command(commands="findme"))
async def start_findme(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", callback_data="edu_bachelor")
    builder.button(text="–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞", callback_data="edu_master")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=builder.as_markup())
    await state.set_state(FindMeState.education_level)

@dp.callback_query(F.data.startswith("edu_"))
async def choose_education_level(callback: CallbackQuery, state: FSMContext):
    level = callback.data.split("_")[1]
    await state.update_data(education_level=level)

    if level == "bachelor":
        builder = InlineKeyboardBuilder()
        builder.button(text="–ë—é–¥–∂–µ—Ç–Ω–∞—è –æ—Å–Ω–æ–≤–∞", callback_data="basis_budget")
        builder.button(text="–ü–æ–ª–Ω–æ–µ –≤–æ–∑–º–µ—â–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç", callback_data="basis_paid")
        builder.button(text="–¶–µ–ª–µ–≤–æ–π –ø—Ä–∏—ë–º", callback_data="basis_target")
        builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="lists_close")
        builder.adjust(1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())
        await state.set_state(FindMeState.enrollment_basis)
    else:
        await callback.message.edit_text("–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.")
        await state.clear()

@dp.callback_query(F.data == "lists_close")
async def close_panel(callback: CallbackQuery):
    await callback.message.delete()

@dp.callback_query(F.data.startswith("basis_"))
async def choose_enrollment_basis(callback: CallbackQuery, state: FSMContext):
    basis = callback.data.split("_")[1]
    await state.update_data(enrollment_basis=basis)

    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞ –æ–±—â–∏—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏—è—Ö", callback_data="cat_general")
    if basis == "budget":
        builder.button(text="–ò–º–µ—é—â–∏–µ –æ—Å–æ–±–æ–µ –ø—Ä–∞–≤–æ", callback_data="cat_special")
    builder.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())
    await state.set_state(FindMeState.enrollment_category)

@dp.callback_query(F.data.startswith("cat_"))
async def choose_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(enrollment_category=category)

    data = await state.get_data()
    basis = data["enrollment_basis"]

    programs = [
        "–ò–Ω–∂–µ–Ω–µ—Ä–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
        "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ò–ò",
        "–ú–∞—Ç. –æ—Å–Ω–æ–≤—ã –ò–ò"
    ]
    if basis != "budget":
        programs += [
            "AI360: –ò–Ω–∂–µ–Ω–µ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö",
            "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞"
        ]

    builder = InlineKeyboardBuilder()
    for i, prog in enumerate(programs):
        builder.button(text=prog, callback_data=f"prog_{i}")
    builder.adjust(1)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=builder.as_markup())
    await state.set_state(FindMeState.program)


@dp.callback_query(F.data.startswith("prog_"))
async def choose_program(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[1])

    data = await state.get_data()
    basis = data["enrollment_basis"]
    programs = [
        "–ò–ò–°",
        "–ê–î–∏–ò–ò",
        "–ú–û–ò–ò"
    ]
    if basis != "budget":
        programs += [
            "AI360",
            "–†–æ–±–æ–∫–µ–∫–∏"
        ]

    chosen_program = programs[index]
    await state.update_data(program=chosen_program)

    final_data = await state.get_data()
    response = (
        f"–í–∞—à –≤—ã–±–æ—Ä:\n"
        f"{bold('–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')}: {level_map.get(final_data['education_level'], '‚Äî')}\n"
        f"{bold('–û—Å–Ω–æ–≤–∞')}: {basis_map.get(final_data['enrollment_basis'], '‚Äî')}\n"
        f"{bold('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')}: {category_map.get(final_data['enrollment_category'], '‚Äî')}\n"
        f"{bold('–ü—Ä–æ–≥—Ä–∞–º–º–∞')}: {final_data['program']}"
    )
    await callback.message.edit_text(response)
    await callback.message.answer("‚úèÔ∏è –í–∞—à ID (—Å –≥–æ—Å—É—Å–ª—É–≥):")
    await state.set_state(FindMeState.searching)


def format_row_wide(label: str, row: list[str]) -> str:
    if not row:
        return f"*{label}*: _–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö_"

    return (
        f"*{label}* {row[0]} *–º–µ—Å—Ç–µ*\n| "
        f"ID: `{row[1]}` | "
        f"–ë–í–ò: {"‚úÖ" if len(row[5]) > 1 else "–Ω–µ—Ç"} | "
        f"–ë–∞–ª–ª—ã –∑–∞ –ò–î: {row[11]} | "
        f"–°—É–º–º–∞ –±–∞–ª–ª–æ–≤(—Å –ò–î): {row[12]} |\n| "
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {row[3]} | "
        f"–°–æ–≥–ª–∞—Å–∏–µ: {"‚úÖ" if len(row[2]) > 1 else "–Ω–µ—Ç"}"
    )


def format_search_result_md(target_row: list[str], row_above: list[str] | None = None,
                            row_below: list[str] | None = None) -> str:
    parts = []

    if target_row:
        parts.append(format_row_wide("–í—ã –Ω–∞", target_row))
    else:
        return "*üòï –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–∞—Ö.*"

    if row_above:
        parts.append(format_row_wide("‚¨ÜÔ∏è –í—ã—à–µ –Ω–∞", row_above))
    else:
        parts.append("*‚¨ÜÔ∏è –í—ã—à–µ:* _–Ω–µ—Ç_")

    if row_below:
        parts.append(format_row_wide("‚¨áÔ∏è –ù–∏–∂–µ –Ω–∞", row_below))
    else:
        parts.append("*‚¨áÔ∏è –ù–∏–∂–µ:* _–Ω–µ—Ç_")

    return "\n\n".join(parts)


@dp.message(FindMeState.searching)
async def start_searching(message: Message, state: FSMContext):
    user_id_from_message = message.text.strip()
    await state.update_data(user_id=user_id_from_message)

    final_data = await state.get_data()

    searching_msg = await message.answer("üîç –ò—â—É –≤–∞—Å –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö...")

    response = search(get_mapped_abiturient_data(final_data), user_id_from_message)

    row_above, target_row, row_below = None, None, None
    if response:
        row_above, target_row, row_below = response

    text = format_search_result_md(target_row, row_above, row_below)
    await message.answer(text, parse_mode="Markdown")

    await searching_msg.delete()
    await state.clear()